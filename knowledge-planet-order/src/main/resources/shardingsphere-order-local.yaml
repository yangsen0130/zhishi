# Define the actual database sources
dataSources:
  order-db-0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/order_db_0?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root
  order-db-1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    jdbcUrl: jdbc:mysql://localhost:3306/order_db_1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
    username: root
    password: root

# Define the sharding rules
rules:
  - !SHARDING
    tables:
      # Sharding rule for the 'orders' table
      orders:
        actualDataNodes: order-db-${0..1}.orders_${0..3}
        databaseStrategy:
          standard:
            shardingColumn: id
            shardingAlgorithmName: orders-db-inline # Renamed for clarity, specific to orders
        tableStrategy:
          standard:
            shardingColumn: id
            shardingAlgorithmName: orders-table-inline # Renamed for clarity, specific to orders
        # keyGenerateStrategy:
        #   column: id
        #   keyGeneratorName: snowflake

      # Sharding rule for the 'message_outbox' table
      message_outbox:
        actualDataNodes: order-db-${0..1}.message_outbox_${0..3}
        databaseStrategy:
          standard:
            shardingColumn: aggregate_id
            shardingAlgorithmName: message-outbox-db-inline # New algorithm for message_outbox DB sharding
        tableStrategy:
          standard:
            shardingColumn: aggregate_id
            shardingAlgorithmName: message-outbox-table-inline # New algorithm for message_outbox table sharding

    # Define Sharding Algorithms
    shardingAlgorithms:
      # --- Algorithms for 'orders' table ---
      orders-db-inline:
        type: INLINE
        props:
          algorithm-expression: order-db-${id % 2} # Uses 'id'

      orders-table-inline:
        type: INLINE
        props:
          algorithm-expression: orders_${id % 4} # Uses 'id' and 'orders_' prefix

      # --- Algorithms for 'message_outbox' table ---
      message-outbox-db-inline:
        type: INLINE
        props:
          # This algorithm now correctly uses 'aggregate_id' in its expression logic
          # The actual expression still refers to the sharding value passed,
          # but we name the algorithm to make it clear it's for aggregate_id.
          # ShardingSphere takes the value of 'aggregate_id' (because shardingColumn is aggregate_id)
          # and the INLINE algorithm uses that value in place of the placeholder.
          # To be absolutely explicit with INLINE, the placeholder in the expression should match the shardingColumn.
          algorithm-expression: order-db-${aggregate_id % 2} # Correctly use aggregate_id

      message-outbox-table-inline:
        type: INLINE
        props:
          # Same as above, using aggregate_id and correct table prefix
          algorithm-expression: message_outbox_${aggregate_id % 4} # Correctly use aggregate_id and prefix

    # keyGenerators:
    #   snowflake:
    #     type: SNOWFLAKE
    # props:
    #   worker-id: 123

# Define global properties
props:
  sql-show: true