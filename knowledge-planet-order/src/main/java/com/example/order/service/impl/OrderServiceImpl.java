package com.example.order.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.example.common.dto.PaymentSuccessEvent;
import com.example.common.entity.MessageOutbox;
import com.example.common.entity.Order;
import com.example.common.exception.BusinessException;
import com.example.common.response.Code;
import com.example.order.mapper.MessageOutboxMapper;
import com.example.order.mapper.OrderMapper;
import com.example.order.service.OrderService;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

@Slf4j
@Service
public class OrderServiceImpl extends ServiceImpl<OrderMapper, Order> implements OrderService {

    @Autowired
    private OrderMapper orderMapper;

    @Autowired
    private MessageOutboxMapper messageOutboxMapper;

    @Autowired
    private ObjectMapper objectMapper; // Jackson ObjectMapper for JSON serialization

    // Define constants for status codes and event types
    private static final int ORDER_STATUS_PENDING = 0;
    private static final int ORDER_STATUS_PAID = 1;
    private static final int ORDER_STATUS_FAILED = 3;
    private static final int MESSAGE_STATUS_PENDING = 0;
    private static final String EVENT_TYPE_PAYMENT_SUCCESS = "PaymentSuccessEvent";
    private static final String AGGREGATE_TYPE_ORDER = "Order";
    private static final String DESTINATION_PAYMENT_SUCCESS = "payment-success-topic"; // Matches application.yml

    @Override
    @Transactional // Keep this transaction short if possible
    public String createOrder(Long userId, Long articleId, BigDecimal amount) {
        log.info("Creating order for user: {}, article: {}", userId, articleId);
        Order order = new Order();
        // ID is generated by MybatisPlus (ASSIGN_ID) before insert
        order.setOrderId(UUID.randomUUID().toString().replace("-", "")); // Business ID
        order.setUserId(userId);
        order.setArticleId(articleId);
        order.setAmount(amount);
        order.setStatus(ORDER_STATUS_PENDING);
        order.setCreateTime(LocalDateTime.now());
        order.setUpdateTime(LocalDateTime.now());

        int inserted = orderMapper.insert(order); // MybatisPlus inserts and sets the generated 'id'
        if (inserted <= 0) {
            log.error("Failed to insert order for user: {}, article: {}", userId, articleId);
            throw new BusinessException(Code.SYSTEM_ERROR, "创建订单失败");
        }
        // 'order.getId()' now contains the Snowflake ID
        log.info("Order created successfully with orderId: {}, generated DB ID: {}", order.getOrderId(), order.getId());
        return order.getOrderId();
    }

    @Override
    @Transactional // *** CRITICAL: This transaction ensures atomicity ***
    public boolean processPaymentSuccess(String orderId) { // Use business orderId for lookup
        log.info("Processing successful payment for business orderId: {}", orderId);

        // 1. Find the order by BUSINESS orderId
        Order order = orderMapper.selectOne(new LambdaQueryWrapper<Order>()
                .eq(Order::getOrderId, orderId)); // Find by business key

        if (order == null) {
            log.error("Order not found for business orderId: {}", orderId);
            throw new BusinessException(Code.ORDER_NOT_EXIST);
        }
        // We now have the order entity, including its Snowflake 'id' (order.getId())

        log.info("Found order with DB ID: {} for business orderId: {}", order.getId(), orderId);


        if (order.getStatus() != ORDER_STATUS_PENDING) {
            log.warn("Order {} (DB ID: {}) is not in PENDING state (current status: {}). Skipping payment processing.", orderId, order.getId(), order.getStatus());
            return order.getStatus() == ORDER_STATUS_PAID;
        }

        // 3. Update Order Status to PAID
        order.setStatus(ORDER_STATUS_PAID);
        order.setPaymentTime(LocalDateTime.now());
        order.setUpdateTime(LocalDateTime.now());
        // Update using the Snowflake 'id' (primary key)
        int updatedRows = orderMapper.updateById(order);

        if (updatedRows <= 0) {
            log.error("Failed to update order status to PAID for order DB ID: {}", order.getId());
            throw new BusinessException(Code.SYSTEM_ERROR, "更新订单状态失败");
        }
        log.info("Order status updated to PAID for order DB ID: {}", order.getId());

        // 4. Create PaymentSuccessEvent Payload (using business orderId)
        PaymentSuccessEvent eventPayload = new PaymentSuccessEvent(
                order.getOrderId(), // Use business orderId in the event
                order.getUserId(),
                order.getArticleId(),
                order.getAmount(),
                System.currentTimeMillis()
        );

        // 5. Serialize Payload to JSON
        String payloadJson;
        try {
            payloadJson = objectMapper.writeValueAsString(eventPayload);
        } catch (JsonProcessingException e) {
            log.error("Failed to serialize PaymentSuccessEvent to JSON for order DB ID: {}", order.getId(), e);
            throw new BusinessException(Code.SYSTEM_ERROR, "序列化支付成功事件失败");
        }

        // 6. Create and Save MessageOutbox Entry
        MessageOutbox message = new MessageOutbox();
        message.setMessageId(UUID.randomUUID().toString().replace("-", ""));
        message.setAggregateType(AGGREGATE_TYPE_ORDER);
        // *** IMPORTANT: Set aggregateId to the Order's Snowflake ID (order.getId()) for sharding ***
        message.setAggregateId(order.getId());
        message.setEventType(EVENT_TYPE_PAYMENT_SUCCESS);
        message.setPayload(payloadJson);
        message.setDestination(DESTINATION_PAYMENT_SUCCESS);
        message.setStatus(MESSAGE_STATUS_PENDING);
        message.setCreateTime(LocalDateTime.now());
        message.setUpdateTime(LocalDateTime.now());
        message.setRetryCount(0);

        // Insert into message_outbox (ShardingSphere routes based on aggregate_id)
        int insertedMessages = messageOutboxMapper.insert(message);
        if (insertedMessages <= 0) {
            log.error("Failed to insert message into outbox for order DB ID: {}", order.getId());
            throw new BusinessException(Code.SYSTEM_ERROR, "保存消息到发件箱失败");
        }
        log.info("Message saved to outbox for order DB ID: {}", order.getId());

        return true;
    }

    @Override
    @Transactional
    public void processPaymentFailure(String orderId) { // Use business orderId
        log.warn("Processing failed payment for business orderId: {}", orderId);
        Order order = orderMapper.selectOne(new LambdaQueryWrapper<Order>()
                .eq(Order::getOrderId, orderId)); // Find by business key

        if (order != null && order.getStatus() == ORDER_STATUS_PENDING) {
            order.setStatus(ORDER_STATUS_FAILED);
            order.setUpdateTime(LocalDateTime.now());
            orderMapper.updateById(order); // Update using Snowflake ID
            log.info("Order status updated to FAILED for order DB ID: {}", order.getId());
        } else if (order == null) {
            log.error("Order not found for business orderId: {}", orderId);
        } else {
            log.warn("Order {} (DB ID: {}) is not in PENDING state (current status: {}). Skipping failure processing.", orderId, order.getId(), order.getStatus());
        }
    }

    @Override
    public Order getOrderByOrderId(String orderId) {
        log.info("获取订单信息, 订单ID: {}", orderId);
        
        if (orderId == null) {
            throw new BusinessException(Code.PARAM_ERROR, "订单ID不能为空");
        }
        
        // 使用业务ID查询订单
        Order order = orderMapper.selectOne(new LambdaQueryWrapper<Order>()
                .eq(Order::getOrderId, orderId));
                
        if (order == null) {
            log.error("订单不存在, 订单ID: {}", orderId);
            throw new BusinessException(Code.ORDER_NOT_EXIST);
        }
        
        return order;
    }
}